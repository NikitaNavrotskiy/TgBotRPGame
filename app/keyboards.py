from typing import List

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from game import Direction, Enemy, NPC, Protagonist, QuestType, Quest


def make_keyboard_welcome() -> ReplyKeyboardMarkup:
    """
    Funciton generates starting keyboard.

    :return: Appropriate keyboard
    """

    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')]
    ], resize_keyboard=True)
    

def make_keyboard_location_start() -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard with 
    possible actions on the location.

    :return: Appropriate keyboard
    """

    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å'), KeyboardButton(text='–û—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–∞–≥–∞')],
        [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è'), KeyboardButton(text='–ú–µ–Ω—é –≥–µ—Ä–æ—è')],
    ], resize_keyboard=True)


def make_keyboard_congratulation() -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard when
    quest has been done or an enemy has been defeated.

    :return: Appropriate keyboard
    """

    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–û—Ç–ª–∏—á–Ω–æ')]
    ], resize_keyboard=True)


def make_keyboard_enemy_description() -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard with 
    possible actions with enemies.

    :return: Appropriate keyboard
    """

    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–ù–∞–ø–∞—Å—Ç—å'), KeyboardButton(text='–ù–∞–∑–∞–¥')],
    ], resize_keyboard=True)


def make_keyboard_battle() -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard with
    possible actions with enemies.

    :return: Appropriate keyboard
    """

    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–ê—Ç–∞–∫–æ–≤–∞—Ç—å'), KeyboardButton(text='–°–±–µ–∂–∞—Ç—å')],
    ], resize_keyboard=True)


def make_keyboard_talk(npcs: List[NPC]) -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard with npcs
    user can have conversation.

    :param npcs: List of npcs
    :return: Appropriate keyboard
    """
    
    buttons: List[List[KeyboardButton]] = []

    for npc in npcs:
        buttons.append([KeyboardButton(
            text='–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å {name}'.format(
                name=npc.name
        )
    )])
    buttons.append([KeyboardButton(
        text='–û—Ç–º–µ–Ω–∞'
    )])
        
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def make_keyboard_talk_actions(prota: Protagonist, npc: NPC) -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard with
    possible actions with given npc.

    :param prota: Instance of Protagonist.
    :param npc: Current npc.
    :return: Appropriate keyboard.
    """

    buttons: List[List[KeyboardButton]] = [[KeyboardButton(text='–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π')]]
    for npc_name in prota.messages_for(npc):
        buttons.append([KeyboardButton(text=f'–ü–µ—Ä–µ–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {npc_name}')])
    buttons.append([KeyboardButton(text='–ù–∞–∑–∞–¥')])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def make_keyboard_proto_quest_list(prota: Protagonist, quests: List[Quest],
                                   talk_state: bool = False):
    """
    Funciton generates keyboard with
    given list of quests.

    :param prota: Instance of Protagonist.
    :param quests: List of quests.
    :param talk_state: Flag to print 'taken' part
    :param npc: NPC if talk_state is True
    :return: Appropriate keyboard.
    """
    
    buttons: List[List[KeyboardButton]] = []

    for quest in quests:
        text = f'    {quest.name}'
        match quest.quest_type:
            case QuestType.Kill:
                text += ' ‚öîÔ∏è'
            case QuestType.Bring:
                text += ' üíç'
            case QuestType.Talk:
                text += ' üí¨'

        if talk_state and prota.has_quest(quest):
            if prota.can_complete(quest):
                text += ' (–º–æ–∂–Ω–æ —Å–¥–∞—Ç—å)'
            else:
                text += ' (–≤–∑—è—Ç–æ)'
        buttons.append([KeyboardButton(text=text)])

    buttons.append([KeyboardButton(text='–û—Ç–º–µ–Ω–∞')])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)  


def make_keyboard_quests_list(proto: Protagonist, npc: NPC) -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard with
    list of quests of npc.

    :param proto: Instance of Protagonist
    :param npc: Current npc.
    :return: Appropriate keyboard.
    """

    return make_keyboard_proto_quest_list(proto, npc.quests, talk_state=True)


def make_keyboard_quest_acts(proto: Protagonist, quest: Quest):
    """
    Funciton generates keyboard with
    actions for quest (Taken or not).

    :param proto: Instance of Protagonist.
    :param quest: Chosen quest.
    :return: Appropriate keyboard.
    """

    if proto.has_quest(quest):
        complete_button_text = None
        if quest.quest_type == QuestType.Kill and quest.goal in proto.killed_enemies:
            complete_button_text = '–û—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ–± —É–±–∏–π—Å—Ç–≤–µ'
        elif quest.quest_type == QuestType.Bring and quest.goal in proto.inventory:
            complete_button_text = '–û—Ç–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç'
        if complete_button_text:
            return ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text=complete_button_text)],
                [KeyboardButton(text='–ù–∞–∑–∞–¥')]
            ], resize_keyboard=True)
        return ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text='–ù–∞–∑–∞–¥')]
        ], resize_keyboard=True)
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–í–∑—è—Ç—å –ó–∞–¥–∞–Ω–∏–µ'), KeyboardButton(text='–ù–∞–∑–∞–¥')]
    ], resize_keyboard=True)


def make_keyboard_attack_list(enemies: List[Enemy]) -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard with
    enemies on the current location user
    can attack.

    :param enemies: List of enemies.
    :return: Appropriate keyboard.
    """

    buttons: List[List[KeyboardButton]] = []

    for enemy in enemies:
        text = f'{enemy.name}\n'
        buttons.append([KeyboardButton(text=text)])
    buttons.append([KeyboardButton(text='–û—Ç–º–µ–Ω–∞')])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def make_keyboard_directions_list(directions: List[Direction], prota: Protagonist) -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard with
    possible directions to relocate.

    :param directions: List of directions.
    :param prota: Protagonist.
    :return: Appropriate keyboard.
    """

    buttons: List[List[KeyboardButton]] = []

    for direction in directions:
        text = f'{direction.name}'
        if direction.location_level > prota.level:
            text += f' (–∑–∞–∫—Ä—ã—Ç–æ, {direction.location_level} —É—Ä.)'
        buttons.append([KeyboardButton(text=text + '\n')])
    buttons.append([KeyboardButton(text='–û—Ç–º–µ–Ω–∞')])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def make_keyboard_quest_description_back() -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard with one button: Back.

    :return: Appropriate keyboard.
    """

    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ù–∞–∑–∞–¥')]], resize_keyboard=True)


def make_keyboard_protagonist_menu() -> ReplyKeyboardMarkup:
    """
    Funciton generates keyboard with one button: Back.

    :return: Appropriate keyboard.
    """

    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å –≥–µ—Ä–æ—è'), KeyboardButton(text='–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π')],
                                         [KeyboardButton(text='–ù–∞–∑–∞–¥')]], resize_keyboard=True)
