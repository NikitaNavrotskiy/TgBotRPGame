from typing import List

from game import Direction, Enemy, NPC, Protagonist, Quest, QuestType


TemplateWelcome = """
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b>, {name}!

–í–∞—à–∞ —Ü–µ–ª—å –≤ —ç—Ç–æ–π –∏–≥—Ä–µ - –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è, —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Å—Ç–∞–º.

<b>–°–ø—Ä–∞–≤–∫–∞ –∏–≥—Ä—ã</b>

üéÆ <b>–ö–æ–º–∞–Ω–¥—ã</b>
- <code>/start</code> - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–∑–∞–Ω–æ–≤–æ)

üõ°Ô∏è <b>–î–µ–π—Å—Ç–≤–∏—è</b>
- <b>–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å</b>: –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –Ω–∞ –ª–æ–∫–∞—Ü–∏–∏.
- <b>–û—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–∞–≥–∞</b>: –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç–ø–∏—á–µ—Å–∫–∏—Ö –±–∏—Ç–≤–∞—Ö —Å –≤—Ä–∞–≥–∞–º–∏.
- <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è</b>: –ü–æ—Å–µ—Ç–∏—Ç—å –¥—Ä—É–≥–∏–µ –ª–æ–∫–∞—Ü–∏–∏.
- <b>–ú–µ–Ω—é –≥–µ—Ä–æ—è</b>: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ—Ä–æ–µ.

üí¨ <b>–†–∞–∑–≥–æ–≤–æ—Ä</b>
- <b>–í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ</b>: –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
- <b>[–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞]</b>

‚öîÔ∏è <b>–ë–æ–π</b>
- <b>–ê—Ç–∞–∫–æ–≤–∞—Ç—å</b>: –ê—Ç–∞–∫–æ–≤–∞—Ç—å –≤—Ä–∞–≥–∞.
- <b>–°–±–µ–∂–∞—Ç—å</b>: –ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–ª–µ –±–∏—Ç–≤—ã.

üó∫Ô∏è <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è</b>
- <b>–í—ã–±—Ä–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.</b>

üõçÔ∏è <b>–ú–µ–Ω—é –≥–µ—Ä–æ—è</b>
- <b>–ü—Ä–æ—Ñ–∏–ª—å –≥–µ—Ä–æ—è</b>: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö.
- <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π</b>: –í–∑—è—Ç—ã–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç—ã.
"""


TemplateLocationNPC = "{available}<u>{name}</u>\n"


TemplateLocationEnemy = "       <u>{name}</u>  {level} —É—Ä.\n"


TemplateLocation = """
<b>–õ–æ–∫–∞—Ü–∏—è:</b> <u>{name}</u>

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
{npcs}{enemies}
"""

TemplateTalk = "–° –∫–µ–º –±—É–¥–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å?"


TemplateNoNPC = "–ù–∞ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"


TemplateTalkNPCQuests = "–í—ã–±–µ—Ä–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ"


TemplateNoQuests = "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π"


TemplateAttack = "–ö—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"


TemplateNoEnemies = "–ù–∞ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –≤—Ä–∞–≥–æ–≤"


TemplateGo = "–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?"


TemplateGoDirectly = "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è {name}"


TemplateTalkOrInspect = """
<b>{name}:</b>
    {description}

    \"{phrase}\""""


TemplateNPCQuest = """
<b>–ó–∞–¥–∞–Ω–∏–µ:</b>
    {name}.
<b>–û–ø–∏—Å–∞–∏–Ω–µ:</b>
    {description}
"""


TemplateNPCQuestTaken = """
–ó–∞–¥–∞–Ω–∏–µ <b>{name}</b> –≤–∑—è—Ç–æ."""


TemplateNPCQuestDone = """
{congratulation}

–ó–∞–¥–∞–Ω–∏–µ <b>{name}</b> –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!

–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{level} —É—Ä–æ–≤–µ–Ω—å</b>
–ó–¥–æ—Ä–æ–≤—å–µ –ø–æ–≤—ã—Å–∏–ª–æc—å –¥–æ <b>{health}</b>
–£—Ä–æ–Ω –ø–æ–≤—ã—Å–∏–ª—Å—è –¥–æ <b>{damage}</b>
{new_locations}"""


TemplateAttackAction = """
–í–∞—à –±—Ä–æ—Å–æ–∫: {proll} + {plevel} = <b>{presult}</b>
–ë—Ä–æ—Å–æ–∫ –≤—Ä–∞–≥–∞: {eroll} + {elevel} = <b>{eresult}</b>
{action_result}"""


TemplateAttackActionSuccess = """
    –í—ã –±—å—ë—Ç–µ –≤—Ä–∞–≥–∞ –Ω–∞ <b>{damage}</b> —É—Ä–æ–Ω–∞"""


TemplateAttackActionFailure = """
    –í—Ä–∞–≥ –±—å–µ—Ç –≤–∞—Å –Ω–∞ {damage} —É—Ä–æ–Ω–∞"""


TemplateAttackActionDraw = """
    –ü—Ä–æ–º–∞—Ö!"""


TemplateBattle = """
<b><u>{ename}</u></b> {elevel} —É—Ä.
<b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {ehealth}ü©∏ || <b>–£—Ä–æ–Ω:</b> {edamage}‚öîÔ∏è
{ehealth_bar}

<b><u>{pname}</u></b> {plevel} —É—Ä.
<b>–ó–¥–æ—Ä–æ–≤—å–µ:</b> {phealth}ü©∏ || <b>–£—Ä–æ–Ω:</b> {pdamage}‚öîÔ∏è
{phealth_bar}"""


TemplateBattleRunoff = "–í—ã —Å–±–µ–∂–∞–ª–∏ –æ—Ç <b>{name}</b>"


TemplateEnemyDefeated = """
–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Ä–∞–≥ <b>{name}</b> –ø–æ–±–µ–∂–¥—ë–Ω!{items}"""


TemplateDead = "–í—ã —É–º–µ—Ä–ª–∏, <b>–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>"


TemplateCompleted = """
<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!"""


TemplateProtagonistMenu = """
–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é"""


TemplateProtagonistInfo = """
<b>–ü—Ä–æ—Ñ–∏–ª—å</b>
<code>–ò–º—è:          </code><b>{name}</b>
<code>–£—Ä–æ–≤–µ–Ω—å:      </code><b>{level}</b>
<code>–ó–¥–æ—Ä–æ–≤—å–µ:     </code><b>{health}</b>/<b>{max_health}</b>
<code>–£—Ä–æ–Ω:         </code><b>{damage}</b>
<code>–ü—Ä–µ–¥–º–µ—Ç—ã:     </code>{inventory}
<code>–£–±–∏—Ç—ã–µ –≤—Ä–∞–≥–∏: </code>{killed_enemies}"""


def template_welcome(prota: Protagonist) -> str:
    """
    Filling template for welcome message.

    :param prota: Protagonist.
    :return: Filled template.
    """

    return TemplateWelcome.format(
        name=prota.name
    )


def npc_info(npcs: List[NPC], cur_proto: Protagonist) -> str:
    """
    Filling template that describe npcs 
    on the location.

    :param npcs: List of npcs.
    :param cur_proto: Protagonist.
    :return: Filled template.
    """

    res = ''
    if npcs:
        res = '\n<b>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:</b>\n'

    for npc in npcs:
        emoji = ''
        if cur_proto.npc_has_quests_to_complete(npc):
            emoji = '‚ùî'
        elif cur_proto.npc_has_not_taken_quests(npc):
            emoji = 'üìú'
        res += TemplateLocationNPC.format(
            name=npc.name,
            available=f'{emoji} ' if emoji else '       '
        )

    return res


def enemies_info(enemies: List[Enemy]) -> str:
    """
    Filling template that describe enemies
    on the location.

    :param enemies: List of enemies.
    :return: Filled template.
    """

    res = ''
    if enemies:
        res = '\n<b>–í—Ä–∞–≥–∏:</b>\n'

    for enemy in enemies:
        res += TemplateLocationEnemy.format(
            name=enemy.name,
            level=enemy.level
        )

    return res


def location_info(loc_name: str, loc_descr: str, 
                  npcs: List[NPC], enemies: List[Enemy], cur_proto: Protagonist) -> str:
    """
    Filling template that describe location.

    :param loc_name: Current location's name.
    :param loc_descr: Current location's description.
    :param npcs: List of npcs.
    :param enemies: List of enemies.
    :param cur_proto: Protagonist.
    :return: Filled template.
    """

    return TemplateLocation.format(
        name=loc_name,
        description=loc_descr,
        enemies=enemies_info(enemies),
        npcs=npc_info(npcs, cur_proto)
    )


def no_npc() -> str:
    """
    Returns phrase when there is no
    npc to talk.

    :return: Message string.
    """

    return TemplateNoNPC


def no_enemies() -> str:
    """
    Returns phrase when there is no
    enemy to attack.

    :return: Message string.
    """

    return TemplateNoEnemies


def no_quests() -> str:
    """
    Returns phrase when there is no
    quests in the list.

    :return: Message string.
    """

    return TemplateNoQuests


def talk_with() -> str:
    """
    Returns phrase when choosing
    npc to talk.

    :return: Message string.
    """

    return TemplateTalk


def who_to_attack() -> str:
    """
    Returns phrase when choosing
    enemy to attack.

    :return: Message string.
    """

    return TemplateAttack


def where_to_go() -> str:
    """
    Returns phrase when choosing
    way to go.

    :return: Message string.
    """

    return TemplateGo


def going(direction: Direction) -> str:
    """
    Filling template that describe way
    user relocate.

    :param direction: Direction instance to go.
    :return: Filled template.
    """

    return TemplateGoDirectly.format(
        name=direction.name
    )


def talk_with_npc(npc: NPC) -> str:
    """
    Filling template that describe npc.

    :param npc: NPC instance to talk with.
    :return: Filled template.
    """

    return TemplateTalkOrInspect.format(
        name=npc.name,
        description=npc.description,
        phrase=npc.phrase
    )


def inspect_enemy(enemy: Enemy) -> str:
    """
    Filling template that describe npc.

    :param enemy: Enemy instance to talk with.
    :return: Filled template.
    """

    return TemplateTalkOrInspect.format(
        name=enemy.name,
        description=enemy.description,
        phrase=enemy.phrase
    )


def talk_npc_actions() -> str:
    """
    Returns phrase when choosing
    a quest.

    :return: Message string.
    """

    return TemplateTalkNPCQuests


def npc_quest(quest: Quest) -> str:
    """
    Filling template that describe quest.

    :param quest: Quest to describe.
    :return: Filled template.
    """

    return TemplateNPCQuest.format(
        name=quest.name,
        description=quest.description
    )


def npc_quest_taken(quest: Quest) -> str:
    """
    Filling template message after
    user has taken a quest.

    :param quest: Taken quest.
    :return: Filled template.
    """

    return TemplateNPCQuestTaken.format(
        name=quest.name
    )


def npc_quest_done(prota: Protagonist, quest: Quest) -> str:
    """
    Filling template message after
    completing quest.

    :param prota: Protagonist
    :param quest: Completed quest.
    :return: Filled template.
    """

    locations = prota.new_locations()
    new_locations = ''
    if locations:
        new_locations = '\n–î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏:'
        for location in locations:
            new_locations += f'\n    <b>{location}</b>'
    return TemplateNPCQuestDone.format(
        congratulation=quest.congratulation,
        name=quest.name,
        level=prota.level,
        health=prota.hp,
        damage=prota.damage,
        new_locations=new_locations
    )


def generate_health_bar(hp: int, max_hp: int):
    green_value: int = max(min(int(hp / max_hp * 100 // 10), 10), 0)
    return 'üü©' * green_value + 'üü•' * (10 - green_value)


def battle(prota: Protagonist, enemy: Enemy) -> str:
    """
    Filling template that
    describes enemy's condition.

    :param prota: Protagonist
    :param enemy: Enemy
    :return: Filled template.
    """

    return TemplateBattle.format(
        ename=enemy.name,
        elevel=enemy.level,
        ehealth=enemy.hp,
        edamage=enemy.damage,
        ehealth_bar=generate_health_bar(enemy.hp, enemy.max_hp),
        pname=prota.name,
        plevel=prota.level,
        phealth=prota.health(),
        pdamage=prota.damage,
        phealth_bar=generate_health_bar(prota.health(), prota.level * 10)
    )


def attack_action(prota: Protagonist, enemy: Enemy, prota_roll: int, enemy_roll: int) -> str:
    """
    Filling template message after
    attack action.

    :param prota: User's protagonist.
    :param enemy: Enemy to attack.
    :param prota_roll: Protagonist's roll.
    :param enemy_roll: Enemy's roll.
    :return: Filled template.
    """

    if enemy_roll > prota_roll:
        action_result = TemplateAttackActionFailure.format(damage=enemy.damage)
    elif prota_roll > enemy_roll:
        action_result = TemplateAttackActionSuccess.format(damage=prota.damage)
    else:
        action_result = TemplateAttackActionDraw
   
    return TemplateAttackAction.format(
        proll=prota_roll - prota.level, plevel=prota.level, presult=prota_roll,
        eroll=enemy_roll - enemy.level, elevel=enemy.level, eresult=enemy_roll,
        action_result=action_result
    )


def battle_run_off(enemy: Enemy) -> str:
    """
    Filling template message after
    run away action.

    :param enemy: Enemy user has battle with.
    :return: Filled template.
    """

    return TemplateBattleRunoff.format(
        name=enemy.name
    )


def enemy_defeated(enemy: Enemy) -> str:
    """
    Filling template message after
    enemy has been defeated.

    :param enemy: Enemy that was defeated.
    :return: Filled template.
    """

    items = ''
    if enemy.items:
        items = '\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏:'
        for item in enemy.items:
            items += f'\n    {item}'

    return TemplateEnemyDefeated.format(
        name=enemy.name,
        items=items
    )


def proto_menu() -> str:
    """
    Asking player to choose menu option.

    :return: Filled template.
    """

    return TemplateProtagonistMenu


def proto_quests_list(prota: Protagonist) -> str:
    """
    Filling template that describes
    list of protagonist's quests.

    :param prota: User's protagonist.
    :return: Filled template.
    """

    res = '<b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:</b>\n'
    
    for quest in prota.current_quests:
        text = f'    {quest.name}'
        match quest.quest_type:
            case QuestType.Kill:
                text += ' ‚öîÔ∏è'
            case QuestType.Bring:
                text += ' üíç'
            case QuestType.Talk:
                text += ' üí¨'
        res += text + '\n'

    return res


def proto_dead() -> str:
    """
    Returns message after dying.

    :return: Message string.
    """

    return TemplateDead


def game_completed() -> str:
    """
    Returns message after game completion

    :return: Message string
    """

    return TemplateCompleted


def proto_info(prota: Protagonist) -> str:
    """
    Filling template that describes
    info about protagonist.

    :param prota: User's protagonist.
    :return: Filled template.
    """

    killed_enemies = ''
    inventory = ''
    for item in prota.inventory.items():
        inventory += f'\n<code>    </code><b>{item[0]}</b>' * item[1]
    for enemy in prota.get_killed_enemies():
        killed_enemies += f'\n<code>    </code><b>{enemy}</b>'
    return TemplateProtagonistInfo.format(
        name=prota.name,
        level=prota.level,
        damage=prota.damage,
        health=prota.health(),
        max_health=prota.level * 10,
        inventory=inventory,
        killed_enemies=killed_enemies
    )
